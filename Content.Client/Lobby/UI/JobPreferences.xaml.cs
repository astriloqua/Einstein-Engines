using System.Linq;
using System.Numerics;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Resources;
using Content.Shared.Customization.Systems;
using Content.Shared.Guidebook;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;


namespace Content.Client.Lobby.UI;


[GenerateTypedNameReferences]
public sealed partial class JobPreferences : Control
{
    private readonly IEntityManager _entManager;
    private readonly IPrototypeManager _prototypeManager;
    private readonly JobRequirementsManager _requirements;
    private readonly CharacterRequirementsSystem _characterRequirementsSystem;
    private readonly IConfigurationManager _cfgManager;
    private readonly IClientPreferencesManager _preferencesManager;

    public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

    public event Action? Save;
    private bool _isDirty;

    private List<(string, RequirementsSelector)> _jobPriorities = new();
    private readonly Dictionary<string, BoxContainer> _jobCategories;


    /// The work in progress profile being edited
    public HumanoidCharacterProfile? Profile;
    // List of all humanoid characters
    public IReadOnlyDictionary<int, ICharacterProfile> Profiles;

    public JobPreferences(IEntityManager entityManager, IPrototypeManager prototypeManager, JobRequirementsManager requirements, IConfigurationManager cfgManager, IClientPreferencesManager preferencesManager, IResourceCache resourceCache)
    {
        RobustXamlLoader.Load(this);
        _entManager = entityManager;
        _prototypeManager = prototypeManager;
        _requirements = requirements;
        _cfgManager = cfgManager;
        _preferencesManager = preferencesManager;

        _characterRequirementsSystem = _entManager.System<CharacterRequirementsSystem>();

        Profiles = _preferencesManager.Preferences!.Characters;

        var panelTex = resourceCache.GetTexture("/Textures/Interface/Nano/button.svg.96dpi.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
            Modulate = new Color(37, 37, 42)
        };
        back.SetPatchMargin(StyleBox.Margin.All, 10);

        BackgroundPanel.PanelOverride = back;

        SaveButton.OnPressed += args =>
        {
            Save?.Invoke();
        };

        //Jobs.Orphan();
        //CTabContainer.AddTab(Jobs, Loc.GetString("humanoid-profile-editor-jobs-tab"));

        _jobCategories = new Dictionary<string, BoxContainer>();
        //IoCManager.InjectDependencies(this);
    }

    public void RefreshJobs()
    {
        // TODO: SHITCODE?! WHY DO WE HAVE TO DO THIS TO GET THE SCROLLBAR TO WORK
        JobScroll.MinHeight = (float)(UserInterfaceManager.WindowRoot.Height * 0.90);

        JobList.DisposeAllChildren();
        _jobCategories.Clear();
        _jobPriorities.Clear();
        var firstCategory = true;

        var departments = new List<DepartmentPrototype>();
            foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
            {
                if (department.EditorHidden)
                    continue;

                departments.Add(department);
            }

            departments.Sort(DepartmentUIComparer.Instance);

            var items = new[]
            {
                ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
                ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
                ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
                ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
            };

            foreach (var department in departments)
            {
                var departmentName = Loc.GetString($"department-{department.ID}");

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new BoxContainer
                    {
                        Orientation = BoxContainer.LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName))
                    };

                    if (firstCategory)
                        firstCategory = false;
                    else
                        category.AddChild(new Control { MinSize = new Vector2(0, 23) });

                    category.AddChild(new PanelContainer
                    {
                        PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#464966") },
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                    ("departmentName", departmentName)),
                                Margin = new Thickness(5f, 0, 0, 0),
                            },
                        },
                    });

                    _jobCategories[department.ID] = category;
                    JobList.AddChild(category);
                }

                var jobs = department.Roles.Select(jobId => _prototypeManager.Index<JobPrototype>(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();

                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var jobContainer = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal, };
                    var selector = new RequirementsSelector { Margin = new(3f, 3f, 3f, 0f) };
                    selector.OnOpenGuidebook += OnOpenGuidebook;

                    var icon = new TextureRect
                    {
                        TextureScale = new(2, 2),
                        VerticalAlignment = VAlignment.Center
                    };
                    var jobIcon = _prototypeManager.Index<JobIconPrototype>(job.Icon);
                    icon.Texture = jobIcon.Icon.Frame0();
                    selector.SetupWithPreferences(items, job.LocalizedName, 200, job.LocalizedDescription, Profiles, icon, job.Guides);
                    var selectedProfile = selector.selectedProfile;
                    var profile = Profile;
                    if (selectedProfile is HumanoidCharacterProfile charProfile)
                    {
                        profile = charProfile;
                    }

                    if (!_requirements.CheckJobWhitelist(job, out var reason))
                        selector.LockRequirements(reason);
                    else if (!_characterRequirementsSystem.CheckRequirementsValid(
                         job.Requirements ?? new(),
                         job,
                         profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                         _requirements.GetRawPlayTimeTrackers(),
                         _requirements.IsWhitelisted(),
                         job,
                         _entManager,
                         _prototypeManager,
                         _cfgManager,
                         out var reasons))
                        selector.LockRequirements(_characterRequirementsSystem.GetRequirementsText(reasons));
                    else
                        selector.UnlockRequirements();

                    selector.OnSelected += selectedPrio =>
                    {
                        var selectedJobPrio = (JobPriority) selectedPrio;
                        Profile = profile?.WithJobPriority(job.ID, selectedJobPrio);

                        foreach (var (jobId, other) in _jobPriorities)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobId == job.ID)
                                other.Select(selectedPrio);
                            else if (selectedJobPrio == JobPriority.High &&
                                     (JobPriority) other.Selected == JobPriority.High)
                            {
                                // Lower any other high priorities to medium.
                                other.Select((int) JobPriority.Medium);
                                Profile = profile?.WithJobPriority(jobId, JobPriority.Medium);
                            }
                        }

                        // TODO: Only reload on high change (either to or from).
                        //ReloadPreview();
                        //`UpdateJobPriorities();
                        //SetDirty();
                    };

                    _jobPriorities.Add((job.ID, selector));
                    jobContainer.AddChild(selector);
                    category.AddChild(jobContainer);
                }
            }

            //UpdateJobPriorities();
    }
}
